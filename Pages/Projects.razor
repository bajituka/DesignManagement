@page "/projects"
@inject ProjectDataAccessLayer.IProjectService projectService
@inject ContactDataAccessLayer.IContactService contactService
@inject NavigationManager NavigationManager

<h1>Проекты</h1>

@if (ProjectsList == null)
{
    <p><em>Загрузка...</em></p>
}
else
{
    <div>
        <a href="projects/create">Новый проект</a>
        @*<button type="button" class="btn btn-primary" value="New" />*@
    </div>
    <table class="table">
        <thead>
            <tr>
                <th>Название</th>
                <th>Начало дизайна</th>
                <th>Завершение дизайна</th>
                <th>Тип недвижимости</th>
                <th>Площадь</th>
                <th>Стоимость проекта</th>
                <th>Заказчик</th>
                <th>Телефон</th>
                <th>Эл. почта</th>
                <th>Авторский надзор</th>
                <th>Действия</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var project in ProjectsList)
            {
                <tr>
                    <td><a @onclick="(() => PrepareForEdit(project.Id))">@project.Name</a></td>
                    <td>@project.DesignStartDate.Date.ToShortDateString()</td>
                    <td>@project.DesignEndDate.Date.ToShortDateString()</td>
                    <td>@project.RealEstateType.GetDisplayName()</td>
                    <td>@project.Area</td>
                    <td>@project.Price</td>
                    <td>@if (project.Client != null)
                    {@project.Client.ContactName}</td>
                    <td>@if (project.Client != null)
                    {@project.Client.Phone}</td>
                    <td>@if (project.Client != null)
                    {@project.Client.Email}</td>
                    <td>@(project.HasDesignSupervision.Equals(true)?"Да":"Нет")</td>
                    <td><button class="btn btn-danger" @onclick="(() => DeleteRecord(project.Id))">Удалить</button></td>
                </tr>
            }
        </tbody>
    </table>
}



@code {
    List<Project> ProjectsList;
    List<Contact> ContactsList;

    protected override async Task OnInitializedAsync()
    {
        ProjectsList = await projectService.Get();
        ContactsList = await contactService.Get();
    }

    private async void DeleteRecord(int id)
    {
        await projectService.Delete(id);
        NavigationManager.NavigateTo("/projects", true);
    }

    public void PrepareForEdit(int projectId)
    {
        NavigationManager.NavigateTo("/projects/" + projectId.ToString());
    }
}